name: MicroPython Firmware

on:
  push:
    branches: [ main ]

env:
  MICROPYTHON_VERSION: 856e08b1931b88271816a2f60648f6ff332235b2
  PIMORONI_PICO_VERSION: v1.20.3

jobs:
  deps:
    runs-on: [self-hosted, builder]
    name: Dependencies
    steps:
    - name: Workspace Cache
      id: cache
      uses: actions/cache@v3
      with:
        path: ${{runner.workspace}}
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}

    # Check out MicroPython
    - name: Checkout MicroPython
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: micropython/micropython
        ref: ${{env.MICROPYTHON_VERSION}}
        submodules: false  # MicroPython submodules are hideously broken
        path: micropython
        clean: true

    - name: Fetch Pico submodules
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython
      run: |
        git submodule update --init lib/pico-sdk
        git submodule update --init lib/cyw43-driver
        git submodule update --init lib/lwip
        git submodule update --init lib/mbedtls
        git submodule update --init lib/micropython-lib
        git submodule update --init lib/tinyusb
        git submodule update --init lib/btstack

    - name: Build mpy-cross
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython/mpy-cross
      run: make

  build:
    needs: deps
    name: Build Firmware
    runs-on: [self-hosted, builder]

    env:
      RELEASE_FILE: badger2040w-${{github.sha}}-micropython.uf2
      RELEASE_FILE_WITH_OS: badger2040w-${{github.sha}}-micropython-with-os.uf2
      FIRMWARE_DIR: "$GITHUB_WORKSPACE/badger2040/firmware"
      BOARD_DIR: "$GITHUB_WORKSPACE/badger2040/firmware/PIMORONI_BADGER2040W"
      BADGER_OS_DIR: "$GITHUB_WORKSPACE/badger2040/badger_os"
      dir2uf2_fs_start: 269664256
      dir2uf2_fs_size: 868352

    steps:
    - name: Compiler Cache
      uses: actions/cache@v3
      with:
        path: /home/runner/.ccache
        key: ccache-micropython-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ccache-micropython-${{github.ref}}
          ccache-micropython-

    - name: Workspace Cache
      uses: actions/cache@v3
      with:
        path: ${{runner.workspace}}
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}

    - uses: actions/checkout@v3
      with:
        submodules: true
        path: badger2040
        clean: true

    # Check out Pimoroni Pico
    - uses: actions/checkout@v3
      with:
        repository: pimoroni/pimoroni-pico
        ref: ${{env.PIMORONI_PICO_VERSION}}
        submodules: true
        path: pimoroni-pico
        clean: true

    # Check out dir2u2f
    - uses: actions/checkout@v3
      with:
        repository: gadgetoid/dir2uf2
        ref: v0.0.1
        path: dir2uf2
        clean: true

    # HACK: Patch startup overclock into Pico SDK
    - name: "HACK: Startup Overclock Patch"
      shell: bash
      working-directory: micropython/lib/pico-sdk
      run: |
        git apply "${{env.FIRMWARE_DIR}}/startup_overclock.patch" || true

    - name: "HACK: CMakeLists.txt Disable C++ Exceptions Patch"
      shell: bash
      working-directory: micropython
      run: git apply "${{env.FIRMWARE_DIR}}/micropython_nano_specs.patch" || true

    - name: "Test Path"
      shell: bash
      working-directory: micropython/ports/rp2
      run: env && echo $PATH
    
    # Build firmware
    - name: Configure MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        cmake -S . -B build -DPICO_BUILD_DOCS=0 -DUSER_C_MODULES=${{env.BOARD_DIR}}/micropython.cmake -DMICROPY_BOARD_DIR=${{env.BOARD_DIR}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        ccache --zero-stats || true
        cmake --build build -j 2
        ccache --show-stats || true

    - name: Rename .uf2 for artifact
      shell: bash
      working-directory: micropython/ports/rp2/build
      run: |
        cp firmware.uf2 ${{env.RELEASE_FILE}}

    - name: Append Filesystem
      shell: bash
      run: |
        python3 -m pip install littlefs-python==0.4.0
        ./dir2uf2/dir2uf2 --fs-start ${{env.dir2uf2_fs_start}} --fs-size ${{env.dir2uf2_fs_size}} --append-to micropython/ports/rp2/build/${{env.RELEASE_FILE}} --manifest ${{env.BOARD_DIR}}/uf2-manifest.txt --filename with-badger-os.uf2 ${{env.BADGER_OS_DIR}}/

    - name: Store .uf2 as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.RELEASE_FILE}}
        path: micropython/ports/rp2/build/${{env.RELEASE_FILE}}

    - name: Store .uf2 + Badger OS as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.RELEASE_FILE_WITH_OS}}
        path: ${{env.RELEASE_FILE_WITH_OS}}